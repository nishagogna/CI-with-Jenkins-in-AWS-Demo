pipeline{
  agent any
  
stages {
    
    stage ('PreBuild Cleanup') {
     steps{
        cleanWs()
        }
        }
    
    stage('Source Code') { // Get code
      steps {
        // get code from our Git repository
        git 'https://github.com/nishagogna/CI-with-Jenkins-in-AWS-Demo'
      }
    }
    

  stage ('Build') {
    steps {    
       
      sh '''
      export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
      mvn clean install
      '''     
          
    }
	}
    
  /*stage('Source Code Scan via SonarQube') {
   steps {
       script {
       scannerHome = tool 'sonar-scanner-4.5';
           withSonarQubeEnv("sonar") {
          sh "${scannerHome}/bin/sonar-scanner -Dsonar.project.settings=${WORKSPACE}/sonar-project.properties"
               }
           }
       }
   }*/
   
  /*stage ('artifactory') {
    steps { 
     pattern= target/*nisha*.war
      target= bazinga-repo/froggy-files/
      server.upload'('pattern': pattern, 'target': target)'

   
  }
  }*/
		
/*stage('Artifactory upload') {	
	steps {
	script {	
			pwd
             def pattern= "*.war"
              def target= "http://104.198.191.157:8081/artifactory/libs-release/"
			  echo "pattern of war is: $pattern"
			  echo "target location is ${target}"
            upload_artifact('pattern': pattern, 'target': target)
         
    }
     }
	}*/
    

	
	
stage ('Artifactory configuration') {
            steps {
                rtServer (
                    id: "artifactory",
                    url: "http://104.198.191.157:8081/artifactory",
                    credentialsId: "artifactory"
                )

                rtMavenDeployer (
                    id: "MAVEN_DEPLOYER",
                    serverId: "artifactory",
                    releaseRepo: "libs-release-local",
                    snapshotRepo: "libs-snapshot-local"
                )

                rtMavenResolver (
                    id: "MAVEN_RESOLVER",
                    serverId: "artifactory",
                    
                    releaseRepo: "libs-release",
                    snapshotRepo: "libs-snapshot"
                )
                
            }
        }
	
stage('Source Code Scan via SonarQube') {
   steps {
       script {
       scannerHome = tool 'sonar-scanner-4.5';
           withSonarQubeEnv("sonar") {
          sh "${scannerHome}/bin/sonar-scanner -Dsonar.project.settings=${WORKSPACE}/sonar-project.properties"
               }
           }
       }
   }
   
    }
}
